// {
//   "compilerOptions": {
//     /* Visit https://aka.ms/tsconfig to read more about this file */

//     /* Projects */
//     // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
//     // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
//     // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
//     // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
//     // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
//     // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

//     /* Language and Environment */
//     "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
//     // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
//     // "jsx": "preserve",                                /* Specify what JSX code is generated. */
//     // "libReplacement": true,                           /* Enable lib replacement. */
//     // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
//     // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
//     // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
//     // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
//     // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
//     // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
//     // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
//     // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
//     // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

//     /* Modules */
//     "module": "esnext",                                /* Specify what module code is generated. */
//     // "rootDir": "./",                                  /* Specify the root folder within your source files. */
//     // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
//     // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
//     // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
//     // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
//     // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
//     // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
//     // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
//     // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
//     // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
//     // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
//     // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
//     // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
//     // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
//     // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
//     // "resolveJsonModule": true,                        /* Enable importing .json files. */
//     // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
//     // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

//     /* JavaScript Support */
//     // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
//     // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
//     // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

//     /* Emit */
//     "declaration": false,   //默认不要声名文件                            /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
//     // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
//     // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
//     // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
//     // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
//     // "noEmit": true,                                   /* Disable emitting files from a compilation. */
//     // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
//     // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
//     // "removeComments": true,                           /* Disable emitting comments. */
//     // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
//     // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
//     // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
//     // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
//     // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
//     // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
//     // "newLine": "crlf",                                /* Set the newline character for emitting files. */
//     // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
//     // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
//     // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
//     // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
//     // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

//     /* Interop Constraints */
//     // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
//     // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
//     // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
//     // "erasableSyntaxOnly": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */
//     // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
//     "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
//     // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
//     "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

//     /* Type Checking */
//     "strict": true,                                      /* Enable all strict type-checking options. */
//     "noImplicitAny": false,   //支持不标注可以默认any
//     //                          /* Enable error reporting for expressions and declarations with an implied 'any' type. */
//     // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
//     // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
//     // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
//     // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
//     // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
//     // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
//     // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
//     // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
//     // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
//     // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
//     // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
//     // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
//     // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
//     // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
//     // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
//     // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
//     // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
//     // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

//     /* Completeness */
//     // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
//     "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
//   },
//   "exclude": [ //排除掉哪些类库
//     "node_modules",
//     "**/__tests__",
//     "dist/**"
//   ]
// }

{
  "compilerOptions": {
    /* 基本选项 */
    "target": "ESNext",                   // 指定 ECMAScript 目标版本
    "module": "ESNext",                    // 指定模块系统
    "lib": ["DOM", "ESNext", "DOM.Iterable"], // 包含的库文件
    "jsx": "react-jsx",                    // 指定 JSX 处理方式
    
    /* 模块解析选项 */
    "moduleResolution": "node",            // 模块解析策略
    "baseUrl": "./",                       // 解析非相对模块的基础目录
    "paths": {                             // 路径映射
      "@/*": ["src/*"]
    },
    "allowSyntheticDefaultImports": true,  // 允许从没有默认导出的模块中默认导入
    
    /* 严格类型检查选项 */
    "strict": true,                        // 启用所有严格类型检查选项
    "noImplicitAny": true,                 // 不允许隐式的 any 类型
    "strictNullChecks": true,              // 严格的 null 检查
    "strictFunctionTypes": true,           // 严格的函数类型检查
    "strictBindCallApply": true,           // 严格的 bind/call/apply 检查
    "strictPropertyInitialization": true,  // 严格的属性初始化检查
    "noImplicitThis": true,                // 不允许 this 有隐式的 any 类型
    "alwaysStrict": true,                  // 以严格模式解析并为每个源文件生成 "use strict" 语句
    
    /* 额外检查 */
    "noUnusedLocals": true,                // 报告未使用的局部变量
    "noUnusedParameters": true,            // 报告未使用的参数
    "noImplicitReturns": true,             // 不是函数的所有返回路径都有返回值时报错
    "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误
    
    /* 生成相关 */
    "declaration": true,                   // 生成对应的 .d.ts 文件
    "declarationDir": "dist/types",        // 声明文件输出目录
    "outDir": "dist",                      // 输出目录
    "sourceMap": true,                     // 生成相应的 .map 文件
    "inlineSources": true,                 // 将源与 sourcemaps 生成到一个文件中
    "esModuleInterop": true,               // 兼容 CommonJS 和 ES Modules
    "skipLibCheck": true,                  // 跳过所有声明文件的类型检查
    
    /* 实验性选项 */
    "experimentalDecorators": true,        // 启用装饰器
    "emitDecoratorMetadata": true          // 为装饰器提供元数据支持
  },
  "include": ["src/**/*"],                 // 包含的文件
  "exclude": [                             // 排除的文件
    "node_modules",
    "dist",
    "**/*.spec.ts",
    "**/*.test.ts",
    "**/*.stories.tsx"
  ]
}
